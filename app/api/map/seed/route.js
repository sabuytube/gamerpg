import { NextResponse } from 'next/server';
import { deleteData, insertDataArray } from '@/lib/mongodb';

const sampleMaps = [
	{
		id: 'grassland',
		name: '‡∏ó‡∏∏‡πà‡∏á‡∏´‡∏ç‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á',
		nameEn: 'Grassland',
		icon: '\ud83c\udf3e',
		description: '‡∏ó‡∏∏‡πà‡∏á‡∏´‡∏ç‡πâ‡∏≤‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
		levelRange: [1, 5],
		terrain: 'grassland',
		isSafeZone: false,
	},
	{
		id: 'forest',
		name: '‡∏õ‡πà‡∏≤‡πÑ‡∏°‡πâ',
		nameEn: 'Forest',
		icon: 'üå≤',
		description: '‡∏õ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏õ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏•‡∏±‡∏ö',
		levelRange: [3, 10],
		terrain: 'forest',
		isSafeZone: false,
	},
	{
		id: 'cave',
		name: '‡∏ñ‡πâ‡∏≥',
		nameEn: 'Cave',
		icon: 'üï≥Ô∏è',
		description: '‡∏ñ‡πâ‡∏≥‡∏°‡∏∑‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ä‡∏ô‡∏¥‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏≤‡∏¢‡∏≤‡∏Å',
		levelRange: [5, 15],
		terrain: 'cave',
		isSafeZone: false,
	},
	{
		id: 'desert',
		name: '‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢',
		nameEn: 'Desert',
		icon: 'üèúÔ∏è',
		description: '‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏£‡∏≤‡∏¢‡∏£‡πâ‡∏≠‡∏ô‡∏£‡∏∞‡∏≠‡∏∏ ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏™‡∏π‡∏á',
		levelRange: [7, 20],
		terrain: 'desert',
		isSafeZone: false,
	},
	{
		id: 'ocean',
		name: '‡∏°‡∏´‡∏≤‡∏™‡∏°‡∏∏‡∏ó‡∏£',
		nameEn: 'Ocean',
		icon: 'üåä',
		description: '‡πÄ‡∏Ç‡∏ï‡∏ó‡∏∞‡πÄ‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏∑‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏ß‡∏à',
		levelRange: [10, 25],
		terrain: 'ocean',
		isSafeZone: false,
	},
	{
		id: 'ancient_ruins',
		name: '‡∏ã‡∏≤‡∏Å‡∏õ‡∏£‡∏±‡∏Å‡∏´‡∏±‡∏Å‡∏û‡∏±‡∏á‡πÇ‡∏ö‡∏£‡∏≤‡∏ì',
		nameEn: 'Ancient Ruins',
		icon: 'üèõÔ∏è',
		description: '‡∏ã‡∏≤‡∏Å‡∏≠‡∏≤‡∏£‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ö‡∏î‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏™',
		levelRange: [15, 30],
		terrain: 'ruins',
		isSafeZone: false,
	},
	{
		id: 'dragon_peak',
		name: '‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏°‡∏±‡∏á‡∏Å‡∏£',
		nameEn: 'Dragon Peak',
		icon: 'üóª',
		description: '‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡∏≤‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏á‡∏Å‡∏£‡∏ú‡∏π‡πâ‡∏¢‡∏¥‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà',
		levelRange: [20, 40],
		terrain: 'mountain',
		isSafeZone: false,
	},
	{
		id: 'underworld',
		name: '‡πÅ‡∏î‡∏ô‡∏ó‡∏°‡∏¥‡∏¨',
		nameEn: 'Underworld',
		icon: 'üî•',
		description: '‡πÅ‡∏î‡∏ô‡∏°‡∏∑‡∏î‡πÅ‡∏´‡πà‡∏á‡∏ß‡∏¥‡∏ç‡∏ç‡∏≤‡∏ì ‡∏°‡∏µ‡∏°‡∏≠‡∏ô‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏™‡πÇ‡∏•‡∏Å',
		levelRange: [25, 60],
		terrain: 'underworld',
		isSafeZone: false,
	},
];

export async function POST() {
	try {
		console.log('üó∫Ô∏è  ‡πÄ‡∏£‡∏¥‡πà‡∏° seed ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà (maps)...');

		const deleteResult = await deleteData('maps', {});
		console.log('üóëÔ∏è  ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤:', deleteResult.affectedRows || 0);

		const result = await insertDataArray('maps', sampleMaps);
		if (!result.status) throw new Error(result.message || 'Failed to insert maps');

		console.log(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ${result.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

		return NextResponse.json({
			success: true,
			message: `Seed Maps ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÄ‡∏û‡∏¥‡πà‡∏° ${result.affectedRows} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
			count: result.affectedRows,
		});
	} catch (error) {
		console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Seed Maps:', error);
		return NextResponse.json({ success: false, error: error.message }, { status: 500 });
	}
}

export async function GET() {
	// Allow GET to trigger seeding (so client can use apiService.get)
	return await POST();
}
